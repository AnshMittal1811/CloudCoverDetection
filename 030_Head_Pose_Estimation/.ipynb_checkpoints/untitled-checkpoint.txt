#     mark_detector = MTCNN()
#     font = cv2.FONT_HERSHEY_SIMPLEX 
#     size = img.shape
#     # 3D model points.
#     model_points = np.array(([-165.0, 170.0, -115.0],  # Left eye
#                              [165.0, 170.0, -115.0],   # Right eye
#                              [0.0, 0.0, 0.0],          # Nose tip
#                              [-150.0, -150.0, -125.0], # Left Mouth corner
#                              [150.0, -150.0, -125.0])  # Right Mouth corner
#                            )

#     # Camera internals
#     focal_length = size[1]
#     center = (size[1]/2, size[0]/2)
#     camera_matrix = np.array(
#                              [[focal_length, 0, center[0]],
#                              [0, focal_length, center[1]],
#                              [0, 0, 1]], dtype = "double"
#                              )
#     dist_coeffs = np.zeros((4,1)) # Assuming no lens distortion
    
#     faceboxes, _, _ = mark_detector.detect(img)
#     for facebox in faceboxes:
#         face_img = img[int(facebox[1]): int(facebox[3]),
#                      int(facebox[0]): int(facebox[2])]
#         face_img = cv2.resize(face_img, (128, 128))
#         face_img = cv2.cvtColor(face_img, cv2.COLOR_BGR2RGB)
#         marks = mark_detector.detect_landmarks(face_img)
#         print(marks)
#         marks *= (int(facebox[2] - facebox[0]))
#         print(facebox[0])
#         marks[:, 0] += int(facebox[0])
#         marks[:, 1] += int(facebox[1])
#         shape = marks.astype(np.uint)

#         # mark_detector.draw_marks(img, marks, color=(0, 255, 0))
# #         image_points = np.array([shape[30],     # Nose tip
# #                                  shape[36],     # Left eye left corner
# #                                  shape[45],     # Right eye right corner
# #                                  shape[48],     # Left Mouth corner
# #                                  shape[54]      # Right mouth corner
# #                                 ], dtype="double")

#         print(image_points)
#         image_points = np.array(shape, dtype = "double")
        
#         image_points_mod = np.ascontiguousarray(image_points[:,:2]).reshape((image_points.shape[0],1,2))
#         (success, rotation_vector, translation_vector) = cv2.solvePnP(model_points, image_points_mod, camera_matrix, dist_coeffs, flags=cv2.SOLVEPNP_UPNP)
            
#         # Project a 3D point (0, 0, 1000.0) onto the image plane.
#         # We use this to draw a line sticking out of the nose
#         (nose_end_point2D, jacobian) = cv2.projectPoints(np.array([(0.0, 0.0, 100.0)]), rotation_vector, translation_vector, camera_matrix, dist_coeffs)

#         for p in image_points:
#             cv2.circle(img, (int(p[0]), int(p[1])), 3, (0,0,255), -1)
            
#         p1 = ( int(image_points[0][0]), int(image_points[0][1]))
#         p2 = ( int(nose_end_point2D[0][0][0]), int(nose_end_point2D[0][0][1]))
#         x1, x2 = draw_annotation_box(img, rotation_vector, translation_vector, camera_matrix, draw_boxes = draw_boxes, color = (127, 255, 128))

#         cv2.line(img, p1, p2, (128, 127, 255), 1)
#         cv2.line(img, tuple(x1), tuple(x2), (127, 255, 128), 1)
#         for (x, y) in shape:
#             cv2.circle(img, (x, y), 1, (128, 127, 255), 1)
#         #cv2.putText(img, str(p1), p1, font, 1, (0, 255, 255), 1)
#         try:
#             m = (p2[1] - p1[1])/(p2[0] - p1[0])
#             ang1 = int(math.degrees(math.atan(m)))
#         except:
#             ang1 = 90
                
#         try:
#             m = (x2[1] - x1[1])/(x2[0] - x1[0])
#             ang2 = int(math.degrees(math.atan(-1/m)))
#         except:
#             ang2 = 90
#             # print('div by zero error')
#         cv2.putText(img, str(ang1), tuple(p1), font, 1, (128, 127, 255), 3)
#         cv2.putText(img, str(ang2), tuple(x1), font, 1, (127, 255, 128), 3)
#     return img
